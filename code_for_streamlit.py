# -*- coding: utf-8 -*-
"""Code for streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11QjuFSM5VRZ8rlC1XE6JrQKUkLwBlb8a
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import streamlit as st

# Streamlit app title and description
st.title("Building Life Cycle Prediction")
st.write("Upload an Excel file containing building data, and get a prediction of compressive strength vs. actual values.")

# File upload option
uploaded_file = st.file_uploader("Choose an Excel file", type=["xlsx"])

if uploaded_file is not None:
    # Load the data from the uploaded file
    data = pd.read_excel(uploaded_file, sheet_name='Data')

    # Display first few rows of the data
    st.write("Dataset Preview:")
    st.write(data.head())

    # Data Preprocessing: Renaming columns
    data.columns = ['Cement', 'Blast_furnace_Slag', 'Fly_Ash', 'Water', 'Super_plasticizer',
                    'Coarse_Aggregate', 'Fine_Aggregate', 'Age_of_testing', 'Compressive_Strength']

    # Handle missing values
    data = data.dropna()

    # Outlier Detection and Removal using IQR
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    data_clean = data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)]

    # Define feature variables (X) and target variable (y)
    X = data_clean.drop('Compressive_Strength', axis=1)
    y = data_clean['Compressive_Strength']

    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Feature Scaling
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Model training
    model = LinearRegression()
    model.fit(X_train_scaled, y_train)

    # Predictions
    y_pred = model.predict(X_test_scaled)

    # Evaluation metrics
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # Display evaluation metrics
    st.write("Mean Squared Error (MSE):", mse)
    st.write("R-squared (R2):", r2)

    # Plot the predicted vs actual values
    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=y_test, y=y_pred)
    plt.xlabel("Actual Compressive Strength")
    plt.ylabel("Predicted Compressive Strength")
    plt.title("Actual vs Predicted Compressive Strength")

    # Display the plot in Streamlit
    st.pyplot(plt.gcf())